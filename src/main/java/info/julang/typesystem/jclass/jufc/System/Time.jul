module System;

/*
 * The constituent parts of a data time object, in Gregorian calendar.
 *
 * Pay particular attention to the index for each part. Both MONTH and DAY are 1-based; HOURS and below are 0-based.
 */
enum DateTimePart {
	/* Year */
	YEAR,
	/* Month (1-12) */
	MONTH,
	/* Day in a month (1-31) */
	DAY,
	/* Hour in a day (0-23) */
	HOUR,
	/* Minute in an hour (0-59) */
	MINUTE,
	/* Second in a minute (0-59) */
	SECOND,
	/* Millisecond in a second (0-999) */
	MILLISECOND
}

/*
 * Represent a data time in Gregorian calendar.
 */
[Bridged(apiset="System.DateTime")]
class DateTime {

	/*
	 * Get the current local time.
	 *
	 * [access] System.Environment/read
	 * [return] The current local time.
	 */
	[Bridged(name="getNow")]
	hosted static DateTime getNow();

	/*
	 * Convert the time to a default form (yyyy/MM/dd-hh:mm:ss.SSS).
	 *
	 * [return] A string in the format of yyyy/MM/dd-hh:mm:ss.SSS
	 */
	public string toString(){
		return toString0();
	}
	
    [Bridged(name="toString")]
	private hosted string toString0();
	
	/*
	 * Return the difference in milliseconds (this - another)
	 *
	 * [param: another] The other datetime to subtract from this one.
	 * [return] < 0 if the other datetime is later than this one; = 0 if equal; > 0 if earlier.
	 */
	[Bridged(name="diff")]	
	hosted int diff(DateTime another);
	
	/*
	 * Create a datatime from each specified part.
	 *
	 * [param: year] year
	 * [param: month] month, 1 - 12
	 * [param: day] day, 1 - 31
	 * [param: hour] hour, 0 - 23
	 * [param: minute] minute, 0 - 59
	 * [param: second] second, 0 - 59
	 * [param: milli] millisecond, 0 - 999
	 */
    [Bridged(name="ctor")]
	hosted DateTime(int year, int month, int day, int hour, int minute, int second, int milli);
	
	/*
	 * Get the value of a specified part from this datetime. 
	 *
	 * [param: part] The part of this datetime to return.
	 * [return] The value of the required part.
	 */
	int getPart(DateTimePart part){
		switch(part){
			case YEAR:   return getYear();
			case MONTH:  return getMonth();
			case DAY:    return getDay();
			case HOUR:   return getHour();
			case MINUTE: return getMinute();
			case SECOND: return getSecond();
			case MILLISECOND: 
			             return getMilli();
			default:
				throw new ArgumentException("part");
		}
	}
	
	/* Get year. */
	[Bridged] hosted int getYear();
	/* Get month. Note this value is 1-based, within the range of `[1, 12`]. */
	[Bridged] hosted int getMonth();
	/* Get day. Note this value is 1-based, within the range of `[1, 31`]. */
	[Bridged] hosted int getDay();
	/* Get hour. */
	[Bridged] hosted int getHour();
	/* Get minute. */
	[Bridged] hosted int getMinute();
	/* Get second. */
	[Bridged] hosted int getSecond();
	/* Get millisecond. */
	[Bridged] hosted int getMilli();
	
	/*
	 * Convert the DateTime to a string with a format string, which may use the following 
	 * characters as a placeholder for the corresponding data time part:
	 *   y: (up to 4 digits) Year
	 *   M: (up to 2 digits) Month in year (1 - 12)
	 *   d: (up to 2 digits) Day in month (1 - 31)
	 *   H: (up to 2 digits) Hour in day (0 - 23)
	 *   m: (up to 2 digits) Minute in hour (0 - 59)
	 *   s: (up to 2 digits) Second in minute (0 - 59)
	 *   S: (up to 3 digits) Millisecond in second (000 - 999)
	 *
	 * Other characters are rendered literally.
	 *
	 * [param: fmt] The format to use.
	 * [return] A date-time string formatted accordingly.
	 * */
	public string format(string fmt) {
		char[] chars = fmt.toChars();
		int partLen = 0;
		string result = "";
		DateTimePart part = DateTimePart.YEAR;
		for (int i = 0; i < chars.length; i++) {
			bool restart = true;
			char c = chars[i];
			switch(c){
			case 'y':
				if (partLen > 0) {
					if (part != DateTimePart.YEAR) {
						// finish the previous part
						result += convertPart(part, partLen);
						part = DateTimePart.YEAR;
						partLen = 1;
					} else {
						// keep adding to the previous part
						partLen++;
					}
				} else {
					// first time
					part = DateTimePart.YEAR;
					partLen = 1;
				}
				break;
			case 'M':
				if (partLen > 0) {
					if (part != DateTimePart.MONTH) {
						result += convertPart(part, partLen);
						part = DateTimePart.MONTH;
						partLen = 1;
					} else {
						partLen++;
					}
				} else {
					part = DateTimePart.MONTH;
					partLen = 1;
				}
				break;			
			case 'd':
				if (partLen > 0) {
					if (part != DateTimePart.DAY) {
						result += convertPart(part, partLen);
						part = DateTimePart.DAY;
						partLen = 1;
					} else {
						partLen++;
					}
				} else {
					part = DateTimePart.DAY;
					partLen = 1;
				}
				break;	
			case 'H':
				if (partLen > 0) {
					if (part != DateTimePart.HOUR) {
						result += convertPart(part, partLen);
						part = DateTimePart.HOUR;
						partLen = 1;
					} else {
						partLen++;
					}
				} else {
					part = DateTimePart.HOUR;
					partLen = 1;
				}
				break;	
			case 'm':
				if (partLen > 0) {
					if (part != DateTimePart.MINUTE) {
						result += convertPart(part, partLen);
						part = DateTimePart.MINUTE;
						partLen = 1;
					} else {
						partLen++;
					}
				} else {
					part = DateTimePart.MINUTE;
					partLen = 1;
				}
				break;	
			case 's':
				if (partLen > 0) {
					if (part != DateTimePart.SECOND) {
						result += convertPart(part, partLen);
						part = DateTimePart.SECOND;
						partLen = 1;
					} else {
						partLen++;
					}
				} else {
					part = DateTimePart.SECOND;
					partLen = 1;
				}
				break;
			case 'S':
				if (partLen > 0) {
					if (part != DateTimePart.MILLISECOND) {
						result += convertPart(part, partLen);
						part = DateTimePart.MILLISECOND;
						partLen = 1;
					} else {
						partLen++;
					}
				} else {
					part = DateTimePart.MILLISECOND;
					partLen = 1;
				}
				break;
			default:
				if (partLen > 0) {
					// finish the previous part
					result += convertPart(part, partLen);
					partLen = 0;
				}

				// add directly into the result
				result += c;
				break;				
			}
		}
		
		if (partLen > 0) {
			// finish the remainint part
			result += convertPart(part, partLen);
		}
		
		return result;
	}
	
	private string convertPart(DateTimePart part, int partLen) {
		string raw = null;
		int max = 2;
		switch(part){
			case YEAR:   raw = (string)getYear(); max = 4; break;
			case MONTH:  raw = (string)getMonth(); break;
			case DAY:    raw = (string)getDay(); break;
			case HOUR:   raw = (string)getHour(); break;
			case MINUTE: raw = (string)getMinute(); break;
			case SECOND: raw = (string)getSecond(); break;
			case MILLISECOND: raw = (string)getMilli(); max = 3; break;
			default: break;
		}
		
		if (raw == null) {
			return "";
		}
		
		int end = raw.length;
		int start = end - partLen;
		if (start < 0) {
			start = 0;
		}
		
		string truncated = raw.substring(start, end);
		int paddings = partLen - (end - start);
		while (paddings > 0) {
			truncated = "0" + truncated;
			paddings--;
		}
		
		return truncated;
	}
}