module System.Util;

/*
 * The interface to add the capability of comparing to another value.
 *
 * While this interface can be called by a user directly, its main intention is to
 * allow certain system types, in particular, a container structure that can maintain
 * an order among its elements, to sort the stored elements according to the result
 * returned by this interface.
 *
 * The implementation doesn't have to cover all the possible types. Instead, it may only
 * handle those types that would appear in the data structure in question. For example,
 * if a user only puts objects of certain classes into a list which she is intent to sort
 * later, she can knowingly implement this interface such that it only checks, casts,
 * and compares to these classes.
 *
 * To tolerate incompatible values, one may simply return 0 if the other's type is not
 * in the scope. The calling class then treats the two as if they were equal. This approach,
 * however, is not going to guarantee even a partially correct order, since the underlying
 * sorting algorithm may very likely be based on the assumption that all the values are 
 * comparable. If tolerance is less important than correctness, throwing an exception is
 * another option.
 */
interface IComparable {

    /*
     * Compare this object to another.
     *
     * [param: another] the other value to be compared to.
     * [return] a positive integer if this object is logically larger than the other; a negative
     * integer if smaller; or 0 if equal (although one may also use this to stand for incomparability). 
     * Being logically larger than another value means it would appear after that value in a sorted 
     * sequence in ascending order. The value of this number, if non-zero, is irrelevant to sorting.
     */
	int compare(var another);
}

/*
 * The interface to add the capability of accessing to stored values by an index.
 *
 * A user-defined object may fully or partially function as a container with vector semantics. Julian
 * supports access to such objects using the built-in indexer syntax. A user may write code like below
 * to access a customized indexable object:
 * [code]
 *    class Vector : IIndexable {
 *       private Object[] _objs;
 *       Vector(int size){
 *         _objs = new Object[size];
 *       }
 *       var at(var index) {
 *         return _objs[index];
 *       }
 *       void at(var index, var value) {
 *         _objs[index] = value;
 *       }
 *       int size() {
 *         return _objs.length;
 *       }
 *    }
 *
 *    Vector vector = new vector(3);
 *
 *    for (int i = 0; i < obj.size(); i++) {
 *      vector[i] = new Object(); // engine calls vector.at(var index, var value) 
 *      var ele = vector[i];      // engine calls vector.at(var index) 
 *    }
 * [code: end]
 *
 * The index doesn't have to be an integer. The user may very well leverage this interface to implement 
 * an associative array or dictionary.
 */
interface IIndexable {

    /*
     * Get the value at specified index. 
     *
     * This method is the backup logic for get-by-indexer syntax on arbitrary objects, as shown in the example of  
     * interface summary.
     *
     * [param: index] An index at which the internal value is to be retrieved.
     * [return] The value retrieved.
	 * [throws: System.ArrayOutOfRangeException] When the index is out of range.
     */
	var at(var index);
	
	/*
	 * Set the value at specified index.
	 *
	 * This method is the backup logic for set-by-indexer syntax on arbitrary objects, as shown in the example of  
     * interface summary.
     *
     * [param: index] An index at which the given value is to be set.
     * [param: value] The value to set.
	 * [throws: System.ArrayOutOfRangeException] When the index is out of range.
	 */
	void at(var index, var value);
	
	/*
	 * Get the size of the indexed scope. Assuming thread-safety measure is in place and an ordinary numeral indexing 
	 * is applied, a user should expect to successfully call the [indexer](#at(var)) with an integer between 0 and 
	 * size - 1, inclusive.
	 * 
	 * Implementing this method is optional, as the engine would not pro-actively call it. It's a good practice
	 * to have it implemented so that the object can be iterated in the classic for-by-index loop.
	 *
	 * [return] The size of the indexed scope. Typically a non-negative value, but this is not required.   
	 */
	int size();
}

/*
 * The interface to add the capability of iterating through built-in syntax.
 *
 * For objects which support vector semantics, it's useful to expose an interface to allow 
 * iteration over all the held values. In particular, if the class implements this interface, 
 * the iteration can be performed directly with a ```foreach``` statement.
 * [code]
 *    class Vector : IIterable {
 *       IIterator getIterator() {
 *         return ...;
 *       }
 *    }
 *
 *    Vector vector = new vector();
 *
 *    for (var ele : vector) { // engine calls getIterator(), which returns a new IIterable.
 *      ele.fun(); // access to each element 
 *    }
 * [code: end]
 *
 * It might look confusing at the first, but it's also critical to know the difference between 
 * IIterable and [IIterator]. IIterable allows the object to return a view on the contained data, 
 * and thus its [core method](#getIterator) can be called unrestrictedly. IIterator, on the other 
 * hand, represents the API provided by this view, exposing the minimally necessary methods for 
 * traversing through the data set. Most importantly, IIterator is also a stateful object. The 
 * foreach statement is essentially interacting with an IIterator, not an IIterable. IIterable is
 * useful in that it decouples the ability of iteration from the state-tracking during such iteration.
 */
interface IIterable : IIterableExtension {

	/*
	 * Get an iterator from this object. The iterator provides methods to traverse through the 
	 * entire data set contained within this object.
	 *
	 * [return] An iterator that has been properly initialized, ready to [move on](type: IIterator#next). 
	 */
	IIterator getIterator();
}

/*
 * A stateful object that projects an iteration-facing view over another object.
 *
 * Normally a user would call an iterator this way:
 * [code]
 *    while(iterator.hasNext()){
 *      iterator.next(); // Get next
 *    }
 * [code: end]
 *
 * But Julian also provides language-level support for this pattern with its foreach statement:
 * [code]
 *    // In each iteration, engine first calls hasNext(), then 
 *    // if true, calls next() and assigns the value to ele.
 *    for (var ele : iterator) {
 *      ele.fun();
 *    }
 * [code: end]
 *
 * Also, if variable ```iterator``` in the foreach's data source is an IIterable, the engine will first
 * call [IIterable.getIterator()](type: IIterable#getIterator) to obtain a new instance of iterator.
 */
interface IIterator {

	/*
	 * Check if the iteration is reaching the end. If this returns true, the caller may proceed 
	 * to make at least one more call of [next()](#next). 
	 *
	 * [return] true if there are more items to return. 
	 */
	bool hasNext();
	
	/*
	 * Get the next item. This method is usually called after [hasNext](#hasNext) returns ```true```, 
	 * but in a multi-threaded context there is no guarantee on what this would actually return, 
	 * regardless of the result by ```hasNext()```.
	 *
	 * [return] The next item. 
	 */
	var next();
}

/*
 * A key-value pair struct used by a few other foundation classes.
 */
class Entry {

	/* 
	 * The key of the entry. When used in [Systen.Collection.Map], if it's an Object, [hashCode()](type: Object#hashCode) 
	 * will be called to get its hash; if primitive, it will be converted to an integer as the hash.
	 */
	var key;
	
	/* 
	 * The value associated with this key. 
	 */
	var value;
	
	/*
	 * Create a new Entry with given key and value.
	 *
	 * [param: key] The key for this entry.
	 * [param: value] The value associated with this entry.
	 */
	Entry(var key, var value){
		this.key = key;
		this.value = value;
	}
}

/*
 * A class that implements this interface gains the ability of being instantiated with a map-like initializer
 * trailing the constructor. For example, since [Systen.Collection.Map] implements this interface, we can 
 * create a new Map with a bunch of preset key-value pairs:
 * [code]
 *   Map map = new Map() { 
 *     "a" = "xyz",
 *     12 = 'c',
 *     mykey = myval + fun(var1), // Treated as string literal, "mykey"
 *     (bar(5)) = obj2 // The outer () is required. See below.
 *   };
 *
 *   // The above is equivalent to
 *   Map map = new Map();
 *   map.initByMap(
 *     new Entry("a", "xyz"),
 *     new Entry(12, 'c'),
 *     new Entry("mykey", myval + fun(var1)),
 *     new Entry(bar(5), obj2)
 *    };
 * [code: end]
 *
 * As demonstrated by the equivalent form, for each key-value initializer, the script engine will evaluate 
 * the left side to a key, the right side a value, so that it can create a [System.Util.Entry] with them. 
 * This syntax sugar, however, requires that the left side be an identifier, literal value or any expression
 * enclosed by parentheses, as otherwise it couldn't pinpoint the position of assignment operator (=) used to
 * demarcate the key and the value.
 *
 * While most keys are used as is, there is one exception. Any **identifier will be reinterpreted as a string 
 * literal**. This rule makes it more convenient to initialize [Dyanmic](tutorial: dynamic). If the key is 
 * indeed to be provided by a variable, enclose the variable with parentheses to force an evaluation.
 * [code]
 *   string country = "United States";
 *   Map capitals = new Map() { 
 *     country = "Washington" // A key of "country" will be added!
 *   };
 *
 *   Console.println(capitals["United States"]); // (null)
 *   Console.println(capitals["country"]); // Washington
 *
 *   capitals = new Map() { 
 *     (country) = "Washington" // A key of "United States" is added instead
 *   };
 *   Console.println(capitals["United States"]); // Washington
 * [code: end]
 */
interface IMapInitializable {

	/*
	 * Initialize the object with an array of [key-value pairs](System.Util.Entry). The implementation may decide
	 * how to handle nullness, key duplication, the legality of key/value types, etc.
	 *
	 * [param: entries] The key-value pairs.
	 */
	void initByMap(Entry[] entries);
}