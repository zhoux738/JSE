module System.IO;

import System;

/*
 * A directory (a.k.a. folder), as defined by the underlying file system. 
 */
[Bridged(apiset="System.IO.Directory")]
class Directory : Item {

	/*
	 * Return false.
	 */
	public bool isFile(){
		return false;
	}
	
	/*
	 * Create a new directory with the specified path.
	 *
	 * [param: path] The path to this directory.
	 */
	[Bridged(name="ctor")]
	hosted Directory(string path);

	/*
	 * Get the name of this directory. This is only the simple name (with extension part) under the path.
	 *
	 * [access] System.IO/stat
	 * [return] The name of this directory.
	 */	
	public string getName(){
		return _getName();
	}
	
	[Bridged(name="getName")]
	private hosted string _getName();

	/*
	 * Get the absolute path of this directory, including the name.
	 *
	 * [access] System.IO/stat
	 * [return] The absolute path of this directory.
	 */		
	public string getPath(){
		return _getPath();
	}
	
	[Bridged(name="getPath")]
	private hosted string _getPath();
	
	/*
	 * Whether this directory exist on file system.
	 *
	 * [access] System.IO/stat
	 * [return] True if the directory exists.
	 */
	public bool exists(){
		return _exists();
	}
	
	[Bridged(name="exists")]
	private hosted bool _exists();

	/*
	 * Create a directory represented by this object.
	 *
	 * [access] System.IO/write
	 * [throws: System.IO.IOException] An error occurred during directory creation.
	 * [return] True if the directory was created; false if the directory already exists.
	 */	
	public bool create(){
		return _create();
	}
	
	[Bridged(name="create")]
	private hosted bool _create();

	/*
	 * Delete this directory recursively.
	 *
	 * This operation is not transactional. If an exception is thrown during the call some items
	 * may have been deleted. 
	 *
	 * [access] System.IO/write
	 * [throws: System.IO.IOException] An error occurred during directory deletion.
	 * [return] True if the directory, along with all of its sub-directories and files contained with, 
	 * were successfully deleted; false if the directory didn't exist.
	 */	
	public bool delete(){
		return _delete();	
	}
	
	[Bridged(name="delete")]
	private hosted bool _delete();
	
	/*
	 * Get the directory this directory resides in.
	 *
	 * [access] System.IO/stat
	 * [throws: System.IO.IOException] An error occurred when trying to get the parent directory.
	 * [return] The parent directory. Or null if the path doesn't exist.
	 */	
	public Directory getParent(){
		string pp = _getParentPath();
		if (pp != null) {
			return new Directory(pp);
		} else {
			return null;
		} 
	}
	
	/*
	 * [inherited]
	 * [access] System.IO/write
	 * [param: newName] The new directory name. Must not contain FS separator.
	 * [return] True if the directory was successfully renamed; false if the directory couldn't be.
	 */
	public bool rename(string newName){
		if (newName.contains(Environment.separator)) {
			return false;
		}
		
		return _rename(newName);
	}
	
	[Bridged(name="rename")]
	private hosted bool _rename(string newName);
	
	/*
	 * [inherited]
	 * [access] System.IO/write
	 * [return] True if the directory was successfully moved; false if the directory couldn't be.
	 */
	public bool move(Directory newDir){
		return _move(newDir);
	}
	
	[Bridged(name="move")]
	private hosted bool _move(Directory newDir);
	
	[Bridged(name="getParentPath")]
	private hosted string _getParentPath();
	
	/*
	 * Get the immediate child with the specified name.
	 *
	 * [access] System.IO/list
	 * [param: name] The name of the child item.
	 * [throws: System.IO.IOException] If the name contains separator. This method cannot be used to get a non-immediate child.
	 * [return] An [item](System.IO.Item) which can be either [File](System.IO.File) or [Directory](System.IO.Directory); 
	 * or null if the child doesn't exist.
	 */	
	public Item getChild(string name){
		if (name.contains(Environment.separator)){
			throw new IOException("Cannot get a child item with name including separator.");
		}
		
		bool[] info = _getChildInfo(name);
		
		if (info[0]) { // Exists, and ...
			if (info[1]) { // is a file
				return new subFile(name);
			} else {
				return new subDirectory(name);
			}
		} else {
			return null;
		}
	}
	
	[Bridged(name="getChildInfo")]
	private hosted bool[] _getChildInfo(string name);
	
	/*
	 * List all items directly under this directory.
	 *
	 * [access] System.IO/list
	 * [return] An array of items directly under this directory, including files and sub-directories. With this method, 
	 * a recursion-based approach is usually applicable to processing all the items under a given directory.
	 */
	Item[] listAll(){
		string[][] all = _listAll();
		int len = all.length;
		Item[] items = new Item[len];
		for(int i=0;i<len;i++){
			if(all[i][1] == "F"){ // "F" for File
				items[i] = new File(all[i][0]);
			} else { // "D" for Directory
				items[i] = new Directory(all[i][0]);
			}
		}
		return items;
	}
	
	[Bridged(name="listAll")]
	private hosted string[][] _listAll();
	
	/*
	 * Create a [File](System.IO.File) instance representing the child item with the specified path. 
	 *
	 * The resultant item is merely a handle and may not exist.
	 *
	 * [param: path] The path relative to this directory.
	 * [throws: System.IO.IOException] If the combined name already exists and is a directory.
	 * [return] A [File](System.IO.File) representing the child item
	 */	
	public File subFile(string path){
		return new File(getPath() + Environment.separator + path);
	}
	
	/*
	 * Create a [Directory](System.IO.Directory) instance representing the child item with the specified path. 
	 *
	 * The resultant item is merely a handle and may not exist.
	 *
	 * [param: path] The path relative to this directory.
	 * [throws: System.IO.IOException] If the combined name already exists and is a file.
	 * [return] A [Directory](System.IO.Directory) representing the child item
	 */	
	public Directory subDirectory(string path){
		return new Directory(getPath() + Environment.separator + path);
	}
}