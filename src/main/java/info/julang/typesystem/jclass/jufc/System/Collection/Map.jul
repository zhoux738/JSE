module System.Collection;

import System;
import System.Util;

// The key is wrapped in an internal class HashKey, which is backed on the platform
// end by an interop class that is then used as the key for Java's HashMap class. 
// As much as it may look convoluted, this is how both hashCode() and equals() 
// defined in Julian can get invoked by Java's HashMap.  

/*
 * A hash map to store data based on the calculated hash value, allowing fast element-targeting
 * operation at O(1) cost.
 *
 * An object stored in map will provide its hash through [Object.hashCode()](Object#hashCode()) 
 * method. A primitive value will convert is numeric value into an integer to be used as hash. 
 * For example, byte value simply promotes the value to integer, and a float value get floored 
 * to an integer. 
 *
 * The hashcode is only a means to locate the slot in the map, but doesn't have to be unique. The
 * uniqueness is determined by [Object.equals()](Object#equals(var)) method. When putting a 
 * value into a map, if the slot suggested by the hashcode is already occupied, ```Object.equals()``` 
 * is called between the new object and existing one. If the method returns true, the new object 
 * is not added; otherwise, the object will be added anyway. If there is more than one object 
 * using that slot, each of them will be compared against before the new object can be cleared 
 * of its uniqueness and added. The multiple objects stored on the same map slot are internally 
 * organized by a linked list. In best practice, try to make the hashcode as unique as possible 
 * to improve the performance, and always pay attention to equals() to ensure its proper 
 * functioning in determining the logical equality between two objects.
 *
 * Julian supports map operation at language level. Use indexer syntax to achieve easy access:
 * [code]
 *    map[key] = value1;
 *    var value2 = map[key];
 * [code: end]
 *
 * Map is iterable. Each value returned during iteration is an [Entry]. Example:
 * [code]
 *    for (var entry : map) {
 *      Console.println(entry.key + "=" + entry.value);
 *    }
 * [code: end]
 * 
 * The methods of this class are **not** thread safe.
 */
[Bridged(apiset="System.Collection.Map")]
class Map : Container, IIndexable, IIterable, IMapInitializable {

	/*
	 * Create a new map instance.
	 */
	[Bridged(name="ctor")]
	hosted Map();
	
	[Bridged(name="put")]
	private hosted void _put(var key, var value);
	[Bridged(name="hasKey")]
	private hosted bool _hasKey(var key);
	[Bridged(name="remove")]
	private hosted var _remove(var key);
	[Bridged(name="get")]
	private hosted var _get(var key);
	[Bridged(name="size")]
	private hosted int _size();
	[Bridged(name="getEntries")]
	private hosted var[] _getEntries();
	[Bridged(name="getKeys")]
	private hosted var[] _getKeys();
	
	/*
	 * Put a key/value pair into the map. The key's hashCode() is called to calculate the storage
	 * location, and its equals() method is used to determine the uniqueness.
	 *
	 * [param: key] The key to the map.
	 * [param: value] The value to store under this key. Can be null.
	 * [throws: System.ArgumentException] When the key is null.
	 */
	void put(var key, var value){
		var k = convert(key);
		_put(k, value);
	}
	
	/*
	 * Check if the specified key exists in the map, without getting the value associated with it.
	 *
	 * [param: key] The key to the map.
	 * [return] true if the key exists; false otherwise.
	 */
	bool hasKey(var key){
		var k = convert(key);
		return _hasKey(k);
	}
	
	/*
	 * Remove the specified key from the map.
	 *
	 * [param: key] The key to the map.
	 * [return] If the key existed, the value associated with this key; otherwise, null. Note if the value 
	 * is null this method cannot tell if a value of null has been removed or the key didn't exist. If such
	 * information is required, call [hasKey](#hasKey) beforehand.
	 */
	var remove(var key){
		var k = convert(key);
		return _remove(k);
	}
	
	/*
	 * Get the value from the map by the specified key.
	 *
	 * [param: key] The key to the map.
	 * [return] If the key existed, the value associated with this key; otherwise, null. Note if the value 
	 * is null this method cannot tell if a value of null has been retrieved or the key didn't exist. If such
	 * information is required, call [hasKey](#hasKey) beforehand.
	 * [throws: System.ArgumentException] When the key is null.
	 */
	var get(var key){
		var k = convert(key);
		return _get(k);
	}
	
	/*
	 * The size of map.
	 *
	 * [return] Always non-negative. 0 if empty. 
	 */
	int size(){
		return _size();
	}
	
	/*
	 * Get all the [entries](Entry) stored in this map.
	 *
	 * [return] All the entries stored in this map.
	 */
	var[] getEntries() {
		Entry e; // Load Entry type here.
		return _getEntries();
	}
	
	/*
	 * Get all the keys stored in this map.
	 *
	 * [return] All the keys stored in this map.
	 */
	var[] getKeys() {
		return _getKeys();
	}
	
	private HashKey convert(var key){
		if (key == null){
			throw new ArgumentException("key");
		}
		
		return new HashKey(key);
	}
	
	// IIndexable
	
    /*
	 * Get value by the specified key.
	 *
	 * [param: key] The key to the map.
	 * [return] Null if not found. Thus undistinguishable from null value.
	 * [throws: System.ArgumentException] When the key is null.
	 */
	var at(var key){
		return get(key);
	}
	
	/*
	 * Set value by the specified key.
	 *
	 * [param: key] The key to the map.
	 * [param: value] The value to set.
	 * [throws: System.ArgumentException] When the key is null.
	 */
	void at(var key, var value){
		put(key, value);
	}
	
	// IIterable

    /*
	 * Get an iterator of this map.
	 *
	 * [return] An iterator which produces key-value pairs in [System.Util.Entry] type.
	 */	
	IIterator getIterator(){
		return new MapIterator(this);
	}
	
	// IMapInitializable
	
	/*
	 * Initialize with an array of key-value pairs. Each pair adds one key to the map.
	 * If duplicated, the last one wins. Unlike [put()](#put) where an 
	 * [ArgumentException](System.ArgumentException) will be thrown, null key is simply skipped.
	 *
	 * [param: entries] The key-value pairs to be added to this map.
	 */
	void initByMap(Entry[] entries) {
		if (entries != null) {
			for (Entry entry : entries) {
				put(entry.key, entry.value);
			}
		}
	}
}

internal class MapIterator : IIterator {

	private Map map;
	private int index;
	private int length;
	private var[] keys;
	
	MapIterator(Map map){
		this.map = map;
	}
	
	bool hasNext() {
		if (keys == null) {
			init();
		}
		
		return index < length;
	}
	
	var next() {
		if (keys == null) {
			init();
		}
		
		var k = keys[index];
		var v = map[k];
		index++;
		return new Entry(k, v);
	}
	
	private void init() {
		keys = map.getKeys();
		length = keys.length;
		index = 0;
	}
}

/*
 * A hash set to store data based on the calculated hash value, allowing fast element-targeting
 * operation at O(1) cost.
 *
 * An object stored in set will provide its hash through [Object.hashCode()](Object#hashCode()) 
 * method. A primitive value will convert is numeric value into an integer to be used as hash. 
 * For example, byte value simply promotes the value to integer, and a float value get floored 
 * to an integer. 
 *
 * The hashcode is only a means to locate the slot in the map, but doesn't have to be unique. The
 * uniqueness is determined by [Object.equals()](Object#equals(var)) method. When putting a 
 * value into a set, if the slot suggested by the hashcode is already occupied, ```Object.equals()``` 
 * is called between the new object and existing one. If the method returns true, the new object 
 * is not added; otherwise, the object will be added anyway. If there is more than one object 
 * using that slot, each of them will be compared against before the new object can be cleared 
 * of its uniqueness and added. The multiple objects stored on the same map slot are internally 
 * organized by a linked list. In best practice, try to make the hashcode as unique as possible 
 * to improve the performance, and always pay attention to equals() to ensure its proper 
 * functioning in determining the logical equality between two objects.
 *
 * Set is iterable:
 * [code]
 *    for (var value : set) {
 *      Console.println(value);
 *    }
 * [code: end]
 * 
 * The methods of this class are **not** thread safe.
 */
[Bridged(apiset="System.Collection.Map")]
class Set : Container, IIterable {

	/*
	 * Create a new set instance.
	 */
	[Bridged(name="ctor")]
	hosted Set();
	
	[Bridged(name="put")]
	private hosted void _put(var key, var value);
	[Bridged(name="hasKey")]
	private hosted bool _hasKey(var key);
	[Bridged(name="remove")]
	private hosted var _remove(var key);
	[Bridged(name="size")]
	private hosted int _size();
	[Bridged(name="getKeys")]
	private hosted var[] _getKeys();
	
	private static const Object s_dummy = new Object();
	
	/*
	 * Add a value into the set. The value's hashCode() is called to calculate the storage
	 * location, and its equals() method is used to determine the uniqueness.
	 *
	 * [param: value] The value to the map.
	 * [throws: System.ArgumentException] When the key is null.
	 */
	void add(var value){
		var k = convert(value);
		_put(k, Set.s_dummy);
	}
	
	/*
	 * Check if the specified value exists in the set.
	 *
	 * [param: value] The value to query about.
	 * [return] true if the value exists; false otherwise.
	 */
	bool has(var value){
		var k = convert(value);
		return _hasKey(k);
	}
	
	/*
	 * Remove the specified value from the set.
	 *
	 * [param: value] The value to find in the set.
	 * [return] True if the value existed and removed as the result of this operation; 
	 * false if the value didn't exist and this operation was a no-op.
	 */
	bool remove(var value){
		var k = convert(value);
		var res = _remove(k);
		return res == Set.s_dummy;
	}
	
	/*
	 * The size of set.
	 *
	 * [return] Always non-negative. 0 if empty. 
	 */
	int size(){
		return _size();
	}
	
	/*
	 * Get all the values stored in this set.
	 *
	 * [return] All the values stored in this set.
	 */
	var[] getAll() {
		return _getKeys();
	}
	
	private HashKey convert(var key){
		if (key == null){
			throw new ArgumentException("key");
		}
		
		return new HashKey(key);
	}
	
	// IIterable

    /*
	 * Get an iterator of this set.
	 *
	 * [return] An iterator which yields values stored in this set.
	 */	
	IIterator getIterator(){
		return new SetIterator(this);
	}
}

internal class SetIterator : IIterator {

	private Set set;
	private int index;
	private int length;
	private var[] keys;
	
	SetIterator(Set set){
		this.set = set;
	}
	
	bool hasNext() {
		if (keys == null) {
			init();
		}
		
		return index < length;
	}
	
	var next() {
		if (keys == null) {
			init();
		}
		
		var k = keys[index];
		index++;
		return k;
	}
	
	private void init() {
		keys = set.getAll();
		length = keys.length;
		index = 0;
	}
}

internal class HashKey {
	
	private var raw;
	
	internal HashKey(var raw){
		this.raw = raw;
	}
	
	// Get original key - used for iteration
	internal var getKey(){
		return raw;
	}
	
	// Get hashcode produced from the original key - used indirectly by platform Map
	internal var getHashCode(){
		return raw is Object ? raw.hashCode() : raw;
	}
	
	// Delegate equals() call to the original key - used indirectly by platform Map
	internal bool equals(var another){
		HashKey hk = (HashKey)another;
		return raw is Object ? raw.equals(hk.raw) : raw == hk.raw;
	}
}