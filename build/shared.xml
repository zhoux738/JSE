<project name="shared" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">
  <!--
    This project is not to be used on its own. Instead it should be imported by other projects using a relative path.
    
    Example - import from src/tools/ide/eclipse/build.xml
      <import file="../../../build/shared.xml"/>
      
    This project,
    (1) loads build.properties from source root;
    (2) defines a few macros:
        - maven: Calls Maven with arbitrary arguments.
        - julian: Invokes JSE against a script file or snippet with a set of bound variables.
                  Requires a last-known-good (LKG) version of JSE.
  -->	
	
  <!-- The property 'ant.file.{project.name}' refers to the file the named project resides in -->
  <dirname property="imported.basedir" file="${ant.file.shared}"/>
  <loadproperties srcFile="${imported.basedir}/../build.properties"/>
  <property environment="env"/>
  <property name="maven.home" value="${env.MAVEN_HOME}"/>

  <!-- Check if we have an LKG jar already -->
  <pathconvert property="lkgJarPath" setonempty="false" pathsep=" ">
    <path>
      <fileset dir="${imported.basedir}/../build/lkg" includes="JSE-*.jar" />
    </path>
  </pathconvert>
  <condition property="lkgJarPathExists">
    <resourcecount when="greater" count="0">
      <fileset file="${lkgJarPath}"/>
    </resourcecount>
  </condition>

  <!-- Check if we have built locally -->
  <property name="builtjar" location="${imported.basedir}/../target/JSE-${jse.version}.jar" relative="false"/>
  <available file="${builtjar}" property="builtJarPathExists"/>
  <condition property="bothJarPathsMissing">
	<and>
      <not><isset property="lkgJarPathExists"/></not>
      <not><isset property="builtJarPathExists"/></not>
	</and>
  </condition>
  <condition property="canCopyBuiltJar">
    <and>
      <not><isset property="lkgJarPathExists"/></not>
      <isset property="builtJarPathExists"/>
    </and>
  </condition>

  <!-- If LKG doesn't exist but a local copy exists, copy it over -->
  <echo message="LKG jar missing. Copying from the local build output." if:set="canCopyBuiltJar"/>
  <copy file="${builtjar}" todir="${imported.basedir}/../build/lkg" if:set="canCopyBuiltJar"/>

  <!-- If LKG doesn't exist and we haven't built locally, try to download the latest from the offical website -->
  <!-- (1) Try curl -->
  <echo message="LKG jar missing. Obtaining from official website." if:set="bothJarPathsMissing"/>
  <available file="curl" filepath="${env.PATH}" property="curl.present" if:set="bothJarPathsMissing"/>
  <!-- curl -L http://127.0.0.1:3000/latest -o build/lkg/JSE-LKG.jar -->
  <echo message="Downloading with curl ..." if:set="curl.present"/>
  <exec executable="curl" dir="${basedir}" failonerror="true" outputproperty="curloutput" errorproperty="curlerror" if:set="curl.present">
    <arg value="-L"/> <!-- Support redirection -->
  	<arg value="-s"/> <!-- Silent mode -->
  	<arg value="--fail"/> <!-- Fail on HTTP error -->
    <arg value="https://${official.website}/latest"/>
    <arg value="-o"/>
    <arg value="${imported.basedir}/../build/lkg/JSE-LKG.jar"/>
  </exec>
  <!-- (2) Try Powershell -->
  <condition property="tryOnWindows">
	<and>
	  <isset property="bothJarPathsMissing"/>
	  <not><isset property="curl.present"/></not>
      <os family="windows"/>
	</and>
  </condition>
  <!-- powershell -c "invoke-webrequest -uri 'https://julang.info/latest' -outfile build/lkg/JSE-LKG.jar" -->
  <echo message="Downloading with Powershell ..." if:set="tryOnWindows"/>
  <exec executable="powershell" dir="${basedir}" failonerror="true" outputproperty="ps1output" errorproperty="ps1error" if:set="tryOnWindows">
    <arg value="-c"/>
  	<arg value="invoke-webrequest -uri 'https://${official.website}/latest' -outfile ${imported.basedir}/../build/lkg/JSE-LKG.jar"/>
  </exec>

  <!-- If we have tried any fix, attest the existence again -->
  <condition property="triedFixingLkgJar">
	<or>
      <isset property="canCopyBuiltJar"/>
      <isset property="bothJarPathsMissing"/>
	</or>
  </condition>
  <pathconvert property="lkgJarPathAfterFix" setonempty="false" pathsep=" " if:set="triedFixingLkgJar">
    <path>
      <fileset dir="${imported.basedir}/../build/lkg" includes="JSE-*.jar" />
    </path>
  </pathconvert>
  <condition property="lkgJarPathExistsAfterFix" if:set="triedFixingLkgJar">
    <resourcecount when="greater" count="0">
      <fileset file="${lkgJarPathAfterFix}"/>
    </resourcecount>
  </condition>
	
  <!-- If LKG still doesn't exist after all the efforts, abort -->
  <condition property="failedToAttestLkgJar">
    <and>
      <not><isset property="lkgJarPathExists"/></not>
      <not><isset property="lkgJarPathExistsAfterFix"/></not>
    </and>
  </condition>
  <fail if="failedToAttestLkgJar" message=
"Cannot invoke JSE from Ant. Must obtain a working copy first. If you have successfully built JSE locally before, try to run 'mvn package' from the source root.
If this is the first time you are trying to build JSE, you may get the latest JSE jar from the official website (https://${official.website}) or contact the author.
If the network environment doesn't allow you to get JSE externally, try to bootstrap locally with: ant bootstrap -Dlocal=true"/>

  <!-- Call Maven from Ant. Originally from http://maven.apache.org/ant-tasks/examples/mvn.html -->
  <macrodef name="maven">
    <attribute name="options" default="" />
    <attribute name="goal" />
    <attribute name="basedir" />
    <attribute name="resultproperty" default="maven.result" />
    <element name="args" implicit="true" optional="true" />
    <sequential>
      <java classname="org.codehaus.classworlds.Launcher" fork="true"
            dir="@{basedir}" resultproperty="@{resultproperty}">
        <jvmarg value="-Xmx512m" />
        <jvmarg value="-Dmaven.multiModuleProjectDirectory" />
        <classpath>
          <fileset dir="${maven.home}/boot">
            <include name="*.jar" />
          </fileset>
          <fileset dir="${maven.home}/lib">
            <include name="*.jar" />
          </fileset>
        </classpath>
        <sysproperty key="classworlds.conf" value="${maven.home}/bin/m2.conf" />
        <sysproperty key="maven.home" value="${maven.home}" />
        <arg line="--batch-mode @{options} @{goal}" />
      </java>
    </sequential>
  </macrodef>
	
  <!-- Execute a Julian script file and/or inlined script code (enclose with CDATA) -->
  <!-- The script may refer to the following variables:
       * jse_version: The version of JSE 
       * script_dir: The full path of directory the script belongs to
       * script_path: The full path of the script file
       * JSE: The Ant project model, of type org.apache.tools.ant.Project. 
            See https://ant.apache.org/manual/api/org/apache/tools/ant/Project.html for API reference.
  -->
  <macrodef name="julian">
    <attribute name="srcFile" default="" />
    <text name="srcText" optional="true"/>
    <sequential>
      <dirname property="script_dir" file="@{srcFile}"/>
      <property name="script_path" location="@{srcFile}"/>
      <property name="jse_version" value="${jse.version}"/>
      <property name="jse.src.snippet" value="@{srcText}"/>
      <condition property="jse.src.file">
      	<not><equals arg1="" arg2="@{srcFile}"/></not>
      </condition>
      <!-- 1. Execute from source file -->
      <script manager="javax" language="julian" src="@{srcFile}" if:set="jse.src.file">
	    <classpath>
	    	<fileset dir="${imported.basedir}/../build/lkg" includes="*.jar"/>
	    </classpath>
      </script>
      <!-- 2. Execute the inline code -->
      <script manager="javax" language="julian" if:set="jse.src.snippet">
  	    <classpath>
  	    	<fileset dir="${imported.basedir}/../build/lkg" includes="*.jar"/>
  	    </classpath>
        @{srcText}
      </script>
    </sequential>
  </macrodef>
</project> 
